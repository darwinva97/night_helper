---
import { prisma } from "@repo/db";
/* 
const seedData = [
  {
    title: "Two Sum",
    codename: "two-sum",
    description: "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.",
    difficult: "Easy",
    TestCase: {
      create: [
        { args: "[2,7,11,15], 9", expectedOutput: "[0,1]" },
        { args: "[3,2,4], 6", expectedOutput: "[1,2]" }
      ]
    }
  },
  {
    title: "Reverse String",
    codename: "reverse-string", 
    description: "Write a function that reverses a string.",
    difficult: "Easy",
    TestCase: {
      create: [
        { args: "hello", expectedOutput: "olleh" },
        { args: "world", expectedOutput: "dlrow" }
      ]
    }
  },
  {
    title: "Valid Parentheses",
    codename: "valid-parentheses",
    description: "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.",
    difficult: "Medium",
    TestCase: {
      create: [
        { args: "()", expectedOutput: "true" },
        { args: "()[]{}", expectedOutput: "true" }
      ]
    }
  },
  {
    title: "Merge Sorted Lists",
    codename: "merge-sorted-lists",
    description: "Merge two sorted linked lists and return it as a sorted list.",
    difficult: "Medium",
    TestCase: {
      create: [
        { args: "[1,2,4], [1,3,4]", expectedOutput: "[1,1,2,3,4,4]" },
        { args: "[], []", expectedOutput: "[]" }
      ]
    }
  },
  {
    title: "Binary Tree Maximum Path",
    codename: "binary-tree-max-path",
    description: "Find the maximum path sum in a binary tree.",
    difficult: "Hard",
    TestCase: {
      create: [
        { args: "[1,2,3]", expectedOutput: "6" },
        { args: "[-10,9,20,null,null,15,7]", expectedOutput: "42" }
      ]
    }
  },
  {
    title: "Regular Expression Matching",
    codename: "regex-matching",
    description: "Implement regular expression matching with support for '.' and '*'.",
    difficult: "Hard",
    TestCase: {
      create: [
        { args: "aa, a*", expectedOutput: "true" },
        { args: "ab, .*", expectedOutput: "true" }
      ]
    }
  },
  {
    title: "FizzBuzz",
    codename: "fizz-buzz",
    description: "Print numbers from 1 to n, but print 'Fizz' for multiples of 3 and 'Buzz' for multiples of 5.",
    difficult: "Easy",
    TestCase: {
      create: [
        { args: "15", expectedOutput: "[1,2,Fizz,4,Buzz,Fizz,7,8,Fizz,Buzz,11,Fizz,13,14,FizzBuzz]" }
      ]
    }
  },
  {
    title: "Median of Arrays",
    codename: "median-sorted-arrays",
    description: "Find the median of two sorted arrays.",
    difficult: "Chad",
    TestCase: {
      create: [
        { args: "[1,3], [2]", expectedOutput: "2.0" },
        { args: "[1,2], [3,4]", expectedOutput: "2.5" }
      ]
    }
  },
  {
    title: "Word Break",
    codename: "word-break",
    description: "Given a string s and a dictionary of strings wordDict, return true if s can be segmented into words in wordDict.",
    difficult: "Medium",
    TestCase: {
      create: [
        { args: "leetcode, [leet,code]", expectedOutput: "true" },
        { args: "applepenapple, [apple,pen]", expectedOutput: "true" }
      ]
    }
  },
  {
    title: "LRU Cache",
    codename: "lru-cache",
    description: "Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.",
    difficult: "Medium",
    TestCase: {
      create: [
        { args: "LRUCache(2), put(1,1), put(2,2), get(1)", expectedOutput: "1" },
        { args: "put(3,3), get(2), get(3)", expectedOutput: "-1,3" }
      ]
    }
  }
];

await prisma.codeChallenge.createMany({
  data: seedData.map(({ TestCase, ...challenge }) => challenge),
  skipDuplicates: true
});

// Create test cases for each challenge
for (const data of seedData) {
  const challenge = await prisma.codeChallenge.findUnique({
    where: { codename: data.codename }
  });
  
  if (challenge) {
    await prisma.testCase.createMany({
      data: data.TestCase.create.map(testCase => ({
        ...testCase,
        codeChallengeId: challenge.id
      }))
    });
  }
} */


const codes = await prisma.codeChallenge.findMany({});
---

<h1>Hola!</h1>
<pre>{JSON.stringify(codes, null, 3)}</pre>